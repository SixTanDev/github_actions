name: Check and PyLint Code

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the branchs "alfa" and "dev"
  push:
    branches: [ "alfa", "dev", "main"]
  pull_request:
    branches: [ "alfa", "dev", "main" ]

  # Allows you to run this workflow manually from the Actions tab or from GitHub API
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    # Allows you to execute the same action in several different work environments at the same time.
    strategy:
      matrix:
        python-version: ["3.8", "3.10", "3.11"]


    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
    
      - name: Set environment variable
        run: |
          echo "PIP_CACHE_NAME=pip-cache-${{ github.sha }}" >> $GITHUB_ENV
          echo "PIP_CACHE_DIR=$HOME/.cache/pip" >> $GITHUB_ENV
  
      - name: Create cache directory
        run: mkdir -p $HOME/.cache/pip
      
      - name: Check pip version
        run: |
          # Check the version of pip installed
          installed_version=$(pip --version | awk '{print $2}')

          # Gets the latest available version of pip
          latest_version=$(pip show pip | grep '^Version: ' | awk '{print $2}')

          # Compare the versions
          if [ "$installed_version" != "$latest_version" ]; then
            echo "Updating pip"
            # Actualiza pip
            python -m pip install --upgrade pip
          else
            echo "pip is up-to-dateo"
          fi
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: $PIP_CACHE_DIR
          key: $PIP_CACHE_NAME
          
      - name: Pylint code
        run: |
          pylint $(git ls-files '*.py')
          
      - name: Save cache
        if: always()
        id: save-cache
        uses: actions/cache@v2
        with:
          path: $PIP_CACHE_DIR
          key: $PIP_CACHE_NAME
          save: true      
